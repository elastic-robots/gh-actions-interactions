name: ci-command

on:
  pull_request_review:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# limit the access of the generated GITHUB_TOKEN
permissions: write-all

jobs:
  command-validation:
    if: startsWith(github.event.review.body, '/test tav')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      versions: ${{ steps.transform.outputs.versions }}
      modules: ${{ steps.transform.outputs.modules }}
    steps:
      - name: Is comment allowed?
        uses: actions/github-script@v6
        with:
          script: |
            // Report with a reaction that the event has been listened
            await github.rest.reactions.createForPullRequestReviewComment({
              ...context.repo,
              comment_id: context.payload.review.id,
              content: '+1',
            })

            const actorPermission = (await github.rest.repos.getCollaboratorPermissionLevel({
              ...context.repo,
              username: context.actor
            })).data.permission
            const isPermitted = ['write', 'admin'].includes(actorPermission)
            if (!isPermitted) {
              const errorMessage = 'Only users with write permission to the repository can run GitHub commands'
              await github.rest.issues.createComment({
                ...context.repo,
                issue_number: context.issue.number,
                body: errorMessage,
              })
              core.setFailed(errorMessage)
              return;
            }

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - id: transform
        name: Transform comment to the supported matrix
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')

            let modules, versions
            try {
              const matrix = JSON.parse(fs.readFileSync('./matrix.json'))
              versions = matrix.versions
              modules = matrix.modules
            } catch (err) {
              core.setFailed(`Error loading './matrix.json': ${err}`)
              return
            }
            const comment = context.payload.review.body
            if (comment !== '/test tav') {
              const regex = /\/test tav ([^\s]+)(\s*)([^\s]*)/
              const match = comment.match(regex)
              if (!match) {
                core.setFailed(`Incorrect comment, please use /test tav(\\s(module1,...,moduleN)?(\\s)?(node1,...,nodeN)?)?'`)
                return
              }
              if (match[1]) {
                if (match[1] !== 'all') {
                  modules = match[1].split(',')
                }
              }
              if (match[3]) {
                versions = match[3].split(',')
              }
            }
            core.setOutput('modules', modules)
            core.setOutput('versions', versions)

      - name: Notify - failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForPullRequestReviewComment({
              ...context.repo,
              comment_id: context.payload.review.id,
              content: '-1',
            })

  test-tav:
    needs: command-validation
    runs-on: ubuntu-latest
    timeout-minutes: 40
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        node: ${{ fromJSON(needs.command-validation.outputs.versions) }}
        module: ${{ fromJSON(needs.command-validation.outputs.modules) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - run: echo '"${{ matrix.module }}" "${{ matrix.node }}"'

      ##
      ## POST-BUILD notifications
      ##
      - name: Notify - success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForPullRequestReviewComment({
              ...context.repo,
              comment_id: context.payload.review.id,
              content: 'heart',
            })

      - name: Notify - failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForPullRequestReviewComment({
              ...context.repo,
              comment_id: context.payload.review.id,
              content: '-1',
            })
