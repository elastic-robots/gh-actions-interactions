name: ci-command

on:
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# limit the access of the generated GITHUB_TOKEN
permissions:
  contents: write
  pull-requests: write

jobs:
  command-validation:
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/test tav')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      versions: ${{ steps.transform.outputs.versions }}
      modules: ${{ steps.transform.outputs.modules }}
      pull-request: ${{ steps.pr.outputs.number }}
    steps:
      - name: Validate github comment
        uses: elastic/apm-pipeline-library/.github/actions/validate-github-comment@main

      - id: pr
        uses: actions/github-script@v6
        with:
          script: core.setOutput('number', context.payload.issue.number)

      - uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ steps.pr.outputs.number }}/merge

      - id: transform
        name: Transform comment to the supported matrix
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require("fs")
            var defaultVersions
            var defaultModules
            fs.readFile("./matrix.json", "utf8", (err, jsonString) => {
              if (err) {
                core.setFailed("Error reading file from disk")
                return
              }
              try {
                const matrix = JSON.parse(jsonString)
                defaultVersions = matrix.versions
                defaultModules = matrix.modules
              } catch (err) {
                core.setFailed("Error parsing JSON string")
              }
            })
            if ('${{ github.event.comment.body }}' === '/test tav') {
              core.setOutput('modules', defaultModules)
              core.setOutput('versions', defaultVersions)
              return
            }
            // Transform comment in the right data structure to be consumed later on
            const comment = context.payload.comment.body
            const regexpSize = /\/test tav (.+) (.+)/
            const match = comment.match(regexpSize)
            if (match[1]) {
              const modules = match[1].replace(/\s/g, '').split(',')
              console.log(`modules: ${modules}`)
              core.setOutput('modules', modules)
            }
            console.log(`match: ${match}`)
            if (!match[2]) {
              core.setOutput('versions', defaultVersions)
            } else {
              const versions = match[2].replace(/\s/g, '').split(',')
              console.log(`versions: ${versions}`)
              core.setOutput('versions', versions)
            }

  test-tav:
    needs: command-validation
    runs-on: ubuntu-latest
    timeout-minutes: 40
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        node: ${{ fromJSON(needs.command-validation.outputs.versions) }}
        module: ${{ fromJSON(needs.command-validation.outputs.modules) }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ needs.command-validation.outputs.pull-request }}/merge
      - run: echo '"${{ matrix.module }}" "${{ matrix.node }}"'

      ##
      ## POST-BUILD notifications
      ##
      - name: Notify - success
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: context.payload.comment.id,
              content: 'heart',
            })

      - name: Notify - failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.reactions.createForIssueComment({
              ...context.repo,
              comment_id: context.payload.comment.id,
              content: '-1',
            })
